syntax = "proto3";

package envoy.extensions.health_checkers.thrift.v3;

import "envoy/extensions/filters/network/thrift_proxy/v3/thrift_proxy.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.health_checkers.thrift.v3";
option java_outer_classname = "ThriftProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/health_checkers/thrift/v3;thriftv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Thrift]
// Thrift health checker :ref:`configuration overview <config_health_checkers_thrift>`.
// [#extension: envoy.health_checkers.thrift]

// [#next-free-field: 6]
message Thrift {
  reserved 1, 5;

  reserved "service_name", "request_headers_to_add";

  // Specifies the method name should be set to each request that is sent to
  // the local thrift host.
  string method_name = 2 [(validate.rules).string = {min_len: 1}];

  // Supplies the type of transport that the Thrift health checker should use. Note that
  // :ref:`AUTO_TRANSPORT<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.TransportType.AUTO_TRANSPORT>`
  // is not supported.
  // [#extension-category: envoy.filters.network]
  filters.network.thrift_proxy.v3.TransportType transport = 3
      [(validate.rules).enum = {defined_only: true}];

  // Supplies the type of protocol that the Thrift health checker should use. Note that
  // :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL>`
  // and :ref:`TWITTER<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.TWITTER>`
  // are not supported.
  filters.network.thrift_proxy.v3.ProtocolType protocol = 4
      [(validate.rules).enum = {defined_only: true}];
}
